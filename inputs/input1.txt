    #include "iostream"   

    #ifdef _WIN32
        #define OS 1
    #elif _WIN64
        #define OS 2
    #elif __APPLE__ || __MACH__
        #define OS 0
    #elif __linux__
        #define OS 3
    #elif __FreeBSD__
        #define OS 5
    #elif __unix || __unix__
        #define OS 4
    #else
        #define OS -1
#endif

using namespace std::filesystem;

            /*    
    comments*/
// comments
// comments

void main() {
    int a, b, c, temp;
    float temp;
    int c = temp + 444;
    int digit = 333e+10 + .5555e-10;
    int digit = -100; 
    bool temp = a >= b;

    char l = 'A';
    char ll = "akdjkabdb\", adkjhnkabd \"";
    string lll = " multiple \
        line \ 
        literal \
    ";

    string lllll = " multiple \
        line \" \
        literal \
    ";

    std::string llllll = " multiple \
        line \ 
        literal ";
    
    std::string lllllll = "multiple " 
                "line"
                "literal";

    char llll = '\'';

    if (a==b) {
        
    } else if (a >= b) {
        
    }else if (a!=b) {
        
    }else if (a || b) {
        
    }else if (a && b) {

    }else if(a <= b) {
        
    }else {
        
    }

    Scanner scanner();
    scanner->scan();

    int hello = a==0 ? b : c;
}

int start() {
    int sum;
    
    for(int i = 0; i< 10; i++) {
        sum += i;
    }
    
    sum++;

    return sum;
}

class Scanner
{
public:
    Scanner(std::string input_file, std::string output_file);
    void execute();
    void printTokens();
    ~Scanner();

private:
    std::string input_filepath;
    std::string output_filepath;
    TokenRecognizer *tokeneRecognizer;
    std::vector<std::string> srcLines;
    std::map<TokenType, std::vector<std::pair<Token, std::string> > > tokens;
    void readingFile();
    void scan();
    void writingFile();
    bool commentLogic(int, char, int, int &);
    int operatorLogic(int, char, std::string, int);
    int stringCharacterLogic(int, char, std::string, int &);
    int digitLogic(int, std::string, int &);
    int identifierAndKeyboardsLogic(int, std::string, int);
};